// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

/*
generator erd {
  provider = "prisma-erd-generator"
}
*/

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos de Autenticação e Permissão
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String

  empresa   Empresa? @relation(fields: [empresaId], references: [id])
  empresaId String?

  permissions Permission[] @relation()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id      String @id @default(uuid())
  name    String @unique
  users   User[] @relation()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelos de Negócio
model Empresa {
  id        String    @id @default(uuid())
  name      String    @unique
  
  users     User[]    // Relação de volta para User
  drivers   Driver[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Driver {
  id        String   @id @default(uuid())
  name      String
  cpf       String   @unique
  phone     String

  empresa   Empresa @relation(fields: [empresaId], references: [id])
  empresaId String

  patio     Patio?   @relation(fields: [patioId], references: [id])
  patioId   String?

  reboques  Reboque[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum TipoReboque {
  LEVE
  PESADO
}

model Reboque {
  id            String      @id @default(uuid())
  placa         String      @unique
  marcaModelo   String
  tipo          TipoReboque

  driver        Driver  @relation(fields: [driverId], references: [id])
  driverId      String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Patio {
  id              String    @id @default(uuid())
  name            String    @unique
  address         String
  cep             String
  referencePoint  String?
  mapUrl          String?
  phone           String?
  ramal           String?
  managerName     String?
  
  drivers         Driver[]
  cidades         Cidade[] @relation()
  orgaos          OrgaosApreensao[] @relation()

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Cidade {
  id            String  @id @default(uuid())
  nome          String
  estado        String

  patios          Patio[] @relation()
  orgaosApreensao OrgaosApreensao[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([nome, estado])
}

model OrgaosApreensao {
  id            String  @id @default(uuid())
  name          String  @unique

  cidade        Cidade @relation(fields: [cidadeId], references: [id])
  cidadeId      String

  patios        Patio[] @relation()

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Setor {
  id            String    @id @default(uuid())
  name          String    @unique 
  phone         String    
  ramal         String?
  responsible   String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}